{
  "name": "browser-sync",
  "description": "Live CSS Reload & Browser Syncing",
  "version": "0.4.3",
  "homepage": "https://github.com/shakyshane/browser-sync",
  "author": {
    "name": "Shane Osbourne"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shakyshane/browser-sync.git"
  },
  "bugs": {
    "url": "https://github.com/shakyshane/browser-sync/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shakyshane/browser-sync/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "portscanner": "~0.1.3",
    "path": "~0.4.9",
    "url": "~0.7.9",
    "open": "~0.0.4",
    "lodash": "~1.3.1",
    "socket.io": "~0.9.16",
    "connect": "~2.11.0",
    "ua-parser-js": "~0.6.2",
    "optimist": "0.6.0",
    "dev-ip": "~0.1.5",
    "gaze": "~0.4.3",
    "http-proxy": "~0.10.3",
    "cl-strings": "~0.0.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-uglify": "~0.2.2",
    "karma-script-launcher": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.3",
    "karma-requirejs": "~0.1.0",
    "karma-coffee-preprocessor": "~0.1.0",
    "karma": "~0.10.2",
    "grunt-karma": "~0.6.2",
    "grunt-cli": "*",
    "grunt": "~0.4.1",
    "optimist": "~0.6.0",
    "socket.io-client": "~0.9.16",
    "grunt-contrib-watch": "~0.5.3",
    "cli-color": "~0.2.3",
    "grunt-shell": "~0.6.1",
    "grunt-mocha-test": "~0.8.1",
    "chai": "~1.8.1",
    "sinon": "~1.7.3",
    "karma-mocha": "~0.1.1",
    "karma-sinon": "~1.0.0"
  },
  "keywords": [
    "browser sync",
    "css",
    "live reload",
    "sync"
  ],
  "bin": {
    "browser-sync": "lib/index.js"
  },
  "readme": "# browser-sync [![Build Status](https://travis-ci.org/shakyShane/browser-sync.png?branch=master)](https://travis-ci.org/shakyShane/browser-sync) [![NPM version](https://badge.fury.io/js/browser-sync.png)](http://badge.fury.io/js/browser-sync) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\n> Keep multiple browsers & devices in sync when building websites.\n\n##Features\n1. **Scroll** - I can keep your pages in sync when scrolling.\n2. **Forms** - You fill out a form in one browser, I'll copy the data to all the others.\n3. **Links** - I'll watch your clicks and make all the browser follow you.\n4. **CSS injecting** - I can even watch your CSS files & inject them when they change.\n5. **Live Reload** - I can also watch files like HTML and PHP & when they change I can reload all browsers for you.\n6. **Built-in Server** - Yep, I can serve static files too if you need me to\n7. **Use with any back-end setup** - Browser-sync includes a proxy option so that it can be used with any existing PHP, Rails, Python, Node or ASP.net setup.\n\n##When is it useful?\nIt's pretty useful when used with a single browser, watching a CSS file for changes & injecting it. But the real power comes when you're building responsive sites and using multiple devices/monitors because it can keep all browsers in sync & make your workflow much faster.\n\n##Screencasts ( < 3 min each )\n1. [Using the Static Server with css injecting](http://quick.as/klaqfq7e)\n2. [Keeping browsers at the same scroll position](http://quick.as/rl9gfgxd)\n3. [Keeping form fields in sync](http://quick.as/zr9ofory)\n4. [When should you use the built-in server?](http://quick.as/adkjfk7r)\n\nWant any more? Something specific? ask me nicely [@shaneOsbourne](http://www.twitter.com/shaneOsbourne)\n\n##Support\nIf you've found Browser-sync useful and would like to contribute to its continued development & support, please feel free to send a donation of any size - it would be greatly appreciated!\n\n[![Support via Gittip](https://rawgithub.com/chris---/Donation-Badges/master/gittip.jpeg)](https://www.gittip.com/shakyshane)\n[![Support via PayPal](https://rawgithub.com/chris---/Donation-Badges/master/paypal.jpeg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=shakyshane%40gmail%2ecom&lc=US&item_name=browser%2dsync)\n\n##Using Grunt? There's a [plugin](https://github.com/shakyShane/grunt-browser-sync) for that\n\n##How to install it?\n```\nnpm install -g browser-sync\n```\n####If that doesn't work on a mac, try\n```\nsudo npm install -g browser-sync\n```\n\n##How to use it\nBrowser-sync is a command-line tool & the `-g` from the command above makes it available everywhere on your system. Just `cd` into your website and run one of the commands below. If any further instructions are needed, you'll be notified on the command line.\n\n###Watching files\n\nWatch ALL CSS files in a directory for changes\n\n```\nbrowser-sync --files \"app/css/*.css\"\n```\n\nWatch ALL CSS files & HTML files in a directory for changes\n\n```\nbrowser-sync --files \"app/css/*.css, app/*.html\"\n```\n###Watching files + your existing Server (proxy)\n\nUsing a local.dev vhost\n\n```\nbrowser-sync --proxy \"local.dev\" --files \"app/css/*.css\"\n```\n\nUsing a local.dev vhost with PORT\n\n```\nbrowser-sync --proxy \"local.dev:8001\" --files \"app/css/*.css\"\n```\nUsing a an IP based host\n\n```\nbrowser-sync --proxy \"192.167.3.2:8001\" --files \"app/css/*.css\"\n```\n\n###Watching files + built-in static server (for html, js & css)\n\nWatch ALL CSS files for changes with a static server\n\n```\nbrowser-sync --files \"app/css/*.css\" --server\n```\n\nWatch ALL CSS files for changes with a static server & specify that the base dir should be \"app\"\n\n```\nbrowser-sync --files \"app/css/*.css\" --server \"app\"\n```\n\nWatch ALL CSS files for changes with a static server & specify that the base dir should be \"app\" & specify the index file (note the missing l)\n\n```\nbrowser-sync --files \"app/css/*.css\" --server \"app\" --index \"index.htm\"\n```\n\nWatch ALL CSS files for changes with a static server & specify that the base dir should be \"app\" & with ghostMode disabled\n\n```\nbrowser-sync --files \"app/css/*.css\" --server \"app\" --ghostMode false\n```\n\n###Example config file with proxy\nIf you want to, you can provide a config file instead of having to remember all of the commands above. Also, a config file allows you to be more specific with options. Here's an example of one that you would put in the root of your project.\n\n```\nmodule.exports = {\n    files: \"app/css/**/*.css\",\n    host: \"192.168.1.1\",\n    ghostMode: {\n        links: true,\n        forms: true,\n        scroll: true\n    },\n    proxy: {\n        host: \"local.dev\" // your existing vhost\n    }\n};\n```\nNow, if you called the file `config.js`, you'd simple run\n\n```\nbrowser-sync --config config.js\n```\n\n##All available options for use in config file\n\n###files - (default: null)\n\n```\n// single file\nfiles: \"app/css/style.css\"\n\n// multiple files\nfiles: [\"app/css/style.css\", \"app/css/ie.css\"]\n\n// multiple files with glob\nfiles: \"app/css/*.css\"\n\n// multiple globs\nfiles: [\"app/css/*.css\", \"app/**.*.html\"]\n```\n\n###debugInfo - (default: true)\n\n```\n// Don't fill my terminal with info\ndebugInfo: false\n\n// Give me as much info as possible\ndebugInfo: true\n```\n\n###host - (default: null)\n```\n// Leave this set as null & browser-sync will try to figure out the correct IP to use. (about 90% accurate)\nhost: null\n\n// Override host detection if you know the correct IP to use\nhost: \"192.168.1.1\"\n\n```\n\n###ghostMode - (default: { links: true, forms: true, scroll: true} )\n```\n// Here you can disable/enable each feature individually\nghostMode: {\n    links: true,\n    forms: true,\n    scroll: false\n}\n\n// Or switch them all off in one go\nghostMode: false\n```\n\n###proxy - (default: null)\nNOTE: `\"localhost\"` not supported here, try to use something else like `\"0.0.0.0\"` instead if you need to.\n\n```\n// use your existing vhost setup\nproxy: {\n\thost: \"local.dev\"\n}\n\n// use your existing vhost setup with a specific port\nproxy: {\n\thost: \"local.dev\",\n\tport: 8001\n}\n\n// use an IP-based host (like the built-in php server for example)\nproxy: {\n\thost: \"192.168.0.4\",\n\tport: 8001\n}\n\n```\n\n###server - (default: null)\nServer should only be used for static HTML, CSS & JS files. It should NOT be used if you have an existing PHP, Wordpress, Rails setup. That's what the proxy above is for.\n\n```\n// Serve files from the app directory\nserver: {\n    baseDir: \"app\"\n}\n\n// Serve files from the app directory, with a specific index filename\nserver: {\n    baseDir: \"app\",\n    index: \"index.htm\"\n}\n\n// Serve files from the root directory\nserver: {\n    baseDir: \"./\"\n}\n```\n\n###ports - (default: null)\nBrowser-sync will detect up to 3 available ports to use within a fixed range. You can override this if you need to.\n\n```\n// only use ports within a certain range\nports: {\n    min: 3000,\n    max: 3100\n}\n\n// you can also specify just a minimum\nports: {\n    min: 3000\n}\n```\n\n###open - (default: true) - when used with server\n```\n// Launch a browser window at the correct location\nopen: true\n\n// Stop the browser from automatically opening\nopen: false\n```\n\n###timestamps - (default: true)\nBrowser-sync appends a timestamp to injected files to ensure the browser reloads the latest version,\nsome workflows (like this one: http://www.youtube.com/watch?v=4r6yhimSmZg) may work better without it though.\n\n```\n// Don't append timestamps to injected files\ntimestamps: false\n```\n\n###notify - (default: true)\nBrowser-sync will flash a quick message in all connected browsers to confirm that CSS injection has taken place (useful when you're not sure whether the injection worked, or whether your CSS didn't make a difference)\n\n```\n// Tell me when a CSS file was injected\nnotify: true\n\n// Don't show any notifications in the browser.\nnotify: false\n```\n\n#Full config file example with Server\nSave this as `anything-you-like.js`\n\n```\nmodule.exports = {\n    files: \"app/css/**/*.css\",\n    debugInfo: true,\n    host: \"192.168.1.1\",\n    ghostMode: {\n        links: true,\n        forms: true,\n        scroll: true\n    },\n    server: {\n        baseDir: \"app\"\n    },\n    open: false,\n    notify: true\n};\n```\n#Full config file example with Proxy\nSave this as `anything-you-like.js`\n\n```\nmodule.exports = {\n    files: \"app/css/**/*.css\",\n    debugInfo: true,\n    host: \"192.168.1.1\",\n    ghostMode: {\n        links: true,\n        forms: true,\n        scroll: true\n    },\n\tproxy: {\n\t\thost: \"local.dev\" // your existing vhost setup.\n\t},\n    open: true,\n    notify: true\n};\n```\n\nNow you can use it by calling it from the command-line\n\n```\nbrowser-sync --config anything-you-like.js\n```\n\n#Contributing\nFork this repo, clone it and then run\n\n```\nnpm install\n```\n###Testing\nTests are split into two categories: Client & Server\n\n**Client-side tests**\nClient-side tests are located in test/client-script/*\n\n// Run the client-side tests & exit\n```\ngrunt test:client\n```\n// Run the client-side tests & re-run on every file-change.\n```\ngrunt karma:watch\n```\n**Server-side tests**\nServer-side tests are located in test/new-server\n\n// Run the server-side tests & exit\n```\ngrunt test:server\n```\n// Run the server-side tests & re-run on every file-change.\n```\ngrunt watch\n```\n// Run the server-side tests & client-side tests once & exit.\n```\ngrunt test\n```\n\nThis is a brand new project so expect bugs & be sure to report them.\n\n## License\nCopyright (c) 2013 Shane Osbourne\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "browser-sync@0.4.3",
  "_from": "browser-sync@"
}
