#!/usr/bin/env node

var nodePath  = require('path')
var program   = require('commander')
var fse       = require("fs-extra")
var pkg       = require('../package.json')
var helpers   = require("../lib/helpers")
var harp      = require('../')

var output = function(msg){
  console.log("Harp v" + pkg.version)
  console.log("Chloi Inc. 2012-2013")
  if(msg){
    console.log('')
    console.log(msg)
  }
}

program
  .version(pkg.version)

program
  .command('init [path]')
  .description('initialize new harp application in current directory')
  .action(function(path, program){
    var projectPath     = nodePath.resolve(process.cwd(), path || "")
    var boilerplatePath = nodePath.resolve(__dirname, "..", "lib", "sample")

    var done = function(err){
      console.log('initialized project at', projectPath)
    }

    fse.mkdirp(projectPath, function(err){
      if(err) return err

      fse.readdir(projectPath, function(err, contents){
        if(err) return err
        if(contents.length == 0){
          fse.readdir(boilerplatePath, function(err, contents){
            if(err) return err
            var total = contents.length
            var count = 0
            contents.forEach(function(i){
              var fromPath = nodePath.resolve(boilerplatePath, i)
              var toPath   = nodePath.resolve(projectPath, i)
              fse.copy(fromPath, toPath, function(err){
                count++
                if(count == total) done()
              })
            })
          })
        }else{
          console.log("Sorry,", projectPath, " must be empty.")
        }
        var count = 0

      })
    })

  })

program
  .command('server [path]')
  .option('-p, --port <port>', 'specify port to listen on')
  .description('start harp server')
  .action(function(path, program){
    var projectPath = nodePath.resolve(process.cwd(), path || "")
    var port        = program.port || 9000
    harp.server(projectPath, { port: port }, function(){
      output("Your server is listening at http://localhost:" + port + "/")
    })
  })

program
  .command('multihost [path]')
  .option('-p, --port <port>', 'specify port to listen on')
  .description('start harp server to host directory of harp apps')
  .action(function(path, program){
    var projectPath = nodePath.resolve(process.cwd(), path || "")
    var port        = program.port || 9000
    harp.multihost(projectPath, { port: port }, function(){
      if(port == "80"){
        var loc = "http://harp.nu"
      }else{
        var loc = "http://harp.nu:" + port
      }
      output("Your server is hosting multiple projects at " + loc)
    })
  })

program
  .command('compile [projectPath] [outputPath]')
  .option('-o, --output <path>', 'specify output directory for compiled assets (relative to project path)')
  .description('compile project to static assets')
  .action(function(projectPath, outputPath, program){

    if(!program){
      program    = outputPath
      outputPath = null
    }

    projectPath = nodePath.resolve(process.cwd(), projectPath || "")

    /**
     * We deal with output path 3 different ways
     *
     *  1. second argument (relative to directory called in)
     *  2. `--output` argument (relative to project root)
     *  3. implicitly projectPath + "/www"
     *
     */

    if(outputPath){
      outputPath = nodePath.resolve(process.cwd(), (outputPath || program.output || ''))
    }else{
      outputPath = nodePath.resolve(projectPath, (program.output || "www"))
    }

    harp.compile(projectPath, outputPath, function(errors, output){
      if(errors) console.log(JSON.stringify(errors, null, 2))
    })
  })

program.command("*").action(program.help)
program.parse(process.argv)

if(program.args.length < 1){
  program.help()
}
